/* File: ComplexityLaboratory.java
 * Author: Calvin Yung, cyung20@bu.edu
 * Date: 10/12/13
 * Class: CS 112, Fall 2013
 * Purpose: compares five sorting algorithms (quick sort, insertion, selection, merge, and shell)
 *          to see how they compare asymptotically.
 */


import java.util.Random;
@SuppressWarnings("unchecked")

public class ComplexityLaboratory {
    
    private static int counter = 0;
    private static Random R = new Random();
    
    public static void main(String[] args) {

        Integer[] A = new Integer[42];
        
        for(int N = 5; N <= 100; N+=5) {
            Integer[] B = new Integer[N];
            counter = 0;
            int indexN = 2;        // index of N
            int indexCounter = 3;  // index of counter
            quickSort(genRandomArray(N));
            B[indexN] = N;
            B[indexCounter] = counter;
            indexN += 2;
            indexCounter += 2;
            B = A;
        }

        for(int N = 5; N <= 100; N+=5) {
            Integer[] B = new Integer[N];
            counter = 0;
            int indexN = 2;
            int indexCounter = 3;
            insertionSort(genRandomArray(N));
            B[indexN] = N;
            B[indexCounter] = counter;
            indexN += 2;
            indexCounter += 2;
            B = A;
        }    
        
        for(int N = 5; N <= 100; N+=5) {
            Integer[] B = new Integer[N];
            counter = 0;
            int indexN = 2;
            int indexCounter = 3;
            selectionSort(genRandomArray(N));
            B[indexN] = N;
            B[indexCounter] = counter;
            indexN += 2;
            indexCounter += 2;
            B = A;
        }
        
        for(int N = 5; N <= 100; N+=5) {
            Integer[] B = new Integer[N];
            counter = 0;
            int indexN = 2;
            int indexCounter = 3;
            mergeSort(genRandomArray(N));
            B[indexN] = N;
            B[indexCounter] = counter;
            indexN += 2;
            indexCounter += 2;
            B = A;
        }    
        
        for(int N = 5; N <= 100; N+=5) {
            Integer[] B = new Integer[N];
            counter = 0;
            int indexN = 2;
            int indexCounter = 3;
            shellSort(genRandomArray(N));
            B[indexN] = N;
            B[indexCounter] = counter;
            indexN += 2;
            indexCounter += 2;
            B = A;
        }    
             
    }
    
    
    /*
     * Generates an Integer array with random numbers ranging from 1 to 9999.
     * Also resets counter to 0.
     */
    private static Integer[] genRandomArray(int N) {
        Integer[] A = new Integer[N];
        for(int i = 0; i < A.length; i+=2) {
            A[i] = R.nextInt(10000);
        }
        
        return A;
    }  
    
    /*
     * Rearranges the array in ascending order, using the natural order.
     */
    private static void quickSort(Comparable[] a) {
        quickSort(a, 0, a.length - 1);
    }
    
    // quicksort the subarray from a[lo] to a[hi]
    private static void quickSort(Comparable[] a, int lo, int hi) { 
        if (hi <= lo) return;
        int j = partition(a, lo, hi);
        quickSort(a, lo, j-1);
        quickSort(a, j+1, hi);
    }
    
    // partition the subarray a[lo..hi] so that a[lo..j-1] <= a[j] <= a[j+1..hi]
    // and return the index j.
    private static int partition(Comparable[] a, int lo, int hi) {
        int i = lo;
        int j = hi + 1;
        Comparable v = a[lo];
        while (true) { 
            
            // find item on lo to swap
            while (quickLess(a[++i], v))
                if (i == hi) break;
            
            // find item on hi to swap
            while (quickLess(v, a[--j]))
                if (j == lo) break;      // redundant since a[lo] acts as sentinel
            
            // check if pointers cross
            if (i >= j) break;
            
            quickExch(a, i, j);
        }
        
        // put partitioning item v at a[j]
        quickExch(a, lo, j);
        
        // now, a[lo .. j-1] <= a[j] <= a[j+1 .. hi]
        return j;
    }
    
    /**
     * Rearranges the array so that a[k] contains the kth smallest key;
     * a[0] through a[k-1] are less than (or equal to) a[k]; and
     * a[k+1] through a[N-1] are greater than (or equal to) a[k].
     * @param a the array
     * @param k find the kth smallest
     */
    private static Comparable select(Comparable[] a, int k) {
        if (k < 0 || k >= a.length) {
            throw new IndexOutOfBoundsException("Selected element out of bounds");
        }
        
        int lo = 0, hi = a.length - 1;
        while (hi > lo) {
            int i = partition(a, lo, hi);
            if      (i > k) hi = i - 1;
            else if (i < k) lo = i + 1;
            else return a[i];
        }
        return a[lo];
    }
    
    // quickSort helper: checks if v < w
    private static boolean quickLess(Comparable v, Comparable w) {
        counter++;
        return (v.compareTo(w) < 0);
    }
    
    // quickSort helper: exchanges a[i] and a[j]
    private static void quickExch(Object[] a, int i, int j) {
        Object swap = a[i];
        a[i] = a[j];
        a[j] = swap;
    }
    
    
    
    
    
    private static void insertionSort(Comparable[] a) {
        int N = a.length;
        for (int i = 0; i < N; i++) {
            for (int j = i; j > 0 && insertionLess(a[j], a[j-1]); j--) {
                insertionExch(a, j, j-1);
            }
        }
    }
    
    // return a permutation that gives the elements in a[] in ascending order
    // do not change the original array a[]
    /**
     * Returns a permutation that gives the elements in the array in ascending order.
     * @param a the array
     * @return a permutation <tt>p[]</tt> such that <tt>a[p[0]]</tt>, <tt>a[p[1]]</tt>,
     *    ..., <tt>a[p[N-1]]</tt> are in ascending order
     */
    private static int[] indexSort(Comparable[] a) {
        int N = a.length;
        int[] index = new int[N];
        for (int i = 0; i < N; i++)
            index[i] = i;
        
        for (int i = 0; i < N; i++)
            for (int j = i; j > 0 && insertionLess(a[index[j]], a[index[j-1]]); j--)
            insertionExch(index, j, j-1);
        
        return index;
    }
    
    // insertionSort helper: checks if v < w
    private static boolean insertionLess(Comparable v, Comparable w) {
        counter++;
        return (v.compareTo(w) < 0);
    }
    
    // insertionSort helper: exchanges a[i] and a[j]
    private static void insertionExch(Object[] a, int i, int j) {
        Object swap = a[i];
        a[i] = a[j];
        a[j] = swap;
    }
    
    // insertionSort helper: exchanges a[i] and a[j]  (for indirect sort)
    private static void insertionExch(int[] a, int i, int j) {
        int swap = a[i];
        a[i] = a[j];
        a[j] = swap;
    }
    
    
    
    
    
    
    private static void selectionSort(Comparable[] a) {
        int N = a.length;
        for (int i = 0; i < N; i++) {
            int min = i;
            for (int j = i+1; j < N; j++) {
                if (selectionLess(a[j], a[min])) min = j;
            }
            selectionExch(a, i, min);
        }
    }
    
    // selectionSort helper: checks if v < w
    private static boolean selectionLess(Comparable v, Comparable w) {
        counter++;
        return (v.compareTo(w) < 0);
    }
    
    // selectionSort helper: exchanges a[i] and a[j]
    private static void selectionExch(Object[] a, int i, int j) {
        Object swap = a[i];
        a[i] = a[j];
        a[j] = swap;
    }
    
    
    
    
    
    // stably merge a[lo .. mid] with a[mid+1 ..hi] using aux[lo .. hi]
    private static void merge(Comparable[] a, Comparable[] aux, int lo, int mid, int hi) {
        
        // copy to aux[]
        for (int k = lo; k <= hi; k++) {
            aux[k] = a[k]; 
        }
        
        // merge back to a[]
        int i = lo, j = mid+1;
        for (int k = lo; k <= hi; k++) {
            if      (i > mid)              a[k] = aux[j++];   // this copying is unnecessary
            else if (j > hi)               a[k] = aux[i++];
            else if (mergeLess(aux[j], aux[i])) a[k] = aux[j++];
            else                           a[k] = aux[i++];
        }
        
    }
    
    // mergesort a[lo..hi] using auxiliary array aux[lo..hi]
    private static void mergeSort(Comparable[] a, Comparable[] aux, int lo, int hi) {
        if (hi <= lo) return;
        int mid = lo + (hi - lo) / 2;
        mergeSort(a, aux, lo, mid);
        mergeSort(a, aux, mid + 1, hi);
        merge(a, aux, lo, mid, hi);
    }
    
    /**
     * Rearranges the array in ascending order, using the natural order.
     * @param a the array to be sorted
     */
    private static void mergeSort(Comparable[] a) {
        Comparable[] aux = new Comparable[a.length];
        mergeSort(a, aux, 0, a.length-1);
    }
    
    // mergeSort helper: checks if v < w
    private static boolean mergeLess(Comparable v, Comparable w) {
        counter++;
        return (v.compareTo(w) < 0);
    }
    
    // mergeSort helper: exchanges a[i] and a[j]
    private static void mergeExch(Object[] a, int i, int j) {
        Object swap = a[i];
        a[i] = a[j];
        a[j] = swap;
    }
    
    
    
    
    
    private static void shellSort(Comparable[] a) {
        int N = a.length;
        
        // 3x+1 increment sequence:  1, 4, 13, 40, 121, 364, 1093, ... 
        int h = 1;
        while (h < N/3) h = 3*h + 1; 
        
        while (h >= 1) {
            // h-sort the array
            for (int i = h; i < N; i++) {
                for (int j = i; j >= h && shellLess(a[j], a[j-h]); j -= h) {
                    shellExch(a, j, j-h);
                }
            }
            
            h /= 3;
        }
    }
    
    // shellSort Helper: checks if v < w
    private static boolean shellLess(Comparable v, Comparable w) {
        counter++;
        return (v.compareTo(w) < 0);
    }
    
    // shellSort Helper: exchanges a[i] and a[j]
    private static void shellExch(Object[] a, int i, int j) {
        Object swap = a[i];
        a[i] = a[j];
        a[j] = swap;
    }
}
