public class Queue implements Queueable {
    private final int SIZE = 10; 
    private int [] A = new int[SIZE]; 
    private int size = 0;                      // number of elements stored in array, NOT size of array
    private int front = 0; 
    private int next = 0;  
    
    // gives next index in array which wraps around in a ring; moves clockwise through indices
    private int nextSlot(int k) { 
        return ((k + 1) % A.length); 
    } 
    
    // enqueue in next slot clockwise around the ring
    private void enqueue(int n) { 
        if(size != A.length) {              // do nothing if full
            A[next] = n; 
            next = nextSlot(next); 
            ++size;  
        }
        
    } 
    
    // dequeue and move front pointer clockwise; can underflow without warning and produce error elements
    private int dequeue() { 
        int temp = A[front]; 
        front = nextSlot(front);  
        --size;  
        return temp; 
    } 
    
    // just a wrapper for private value size
    private int size() { 
        return size; 
    }  
    
    // standard utility for data structures
    private boolean isEmpty() { 
        return (size == 0); 
    } 
}